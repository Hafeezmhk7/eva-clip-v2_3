#!/usr/bin/env python3
"""
FIXED: CLIP Reproduction Training Script with Consistent Evaluation
Main training script for reproducing CLIP embeddings from EVA embeddings

KEY FIXES:
1. ‚úÖ Evaluation uses subset of training data for consistency
2. ‚úÖ Extensive data statistics logging and validation
3. ‚úÖ Early detection of norm mismatches between training/evaluation
4. ‚úÖ Comprehensive debugging of data flow
5. ‚úÖ Validation that training and evaluation have similar norms

This addresses the critical issue where:
- Training data had CLIP norm ~40
- Evaluation data had CLIP norm ~26
- Model learned to predict norm ~40 but was evaluated on norm ~26
"""

import os
import sys
import argparse
import torch
import json
import logging
from pathlib import Path
from datetime import datetime
import traceback
import numpy as np

# Setup paths
sys.path.insert(0, str(Path(__file__).parent))

def setup_logging():
    """Setup comprehensive logging"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(sys.stdout),
            logging.FileHandler('clip_reproduction_training_fixed.log', mode='w')
        ]
    )
    return logging.getLogger(__name__)

def parse_arguments():
    """Parse command line arguments with consistency options"""
    parser = argparse.ArgumentParser(description="FIXED: CLIP Reproduction with Consistent Evaluation")
    
    # Required arguments
    parser.add_argument("--chunked_embeddings_dir", type=str, required=True,
                       help="Path to chunked embeddings directory")
    parser.add_argument("--output_dir", type=str, required=True,
                       help="Output directory for checkpoints")
    
    # Model configuration
    parser.add_argument("--model_size", type=str, default="base",
                       choices=["tiny", "small", "base", "large"],
                       help="Model size")
    parser.add_argument("--training_mode", type=str, default="patch_only",
                       choices=["patch_only", "cls_patch"],
                       help="Training mode")
    
    # BLIP3-o architecture features
    parser.add_argument("--use_3d_rope", action="store_true", default=True,
                       help="Use 3D Rotary Position Embedding")
    parser.add_argument("--use_sandwich_norm", action="store_true", default=True,
                       help="Use sandwich normalization (RMSNorm before and after)")
    parser.add_argument("--no_3d_rope", action="store_true",
                       help="Disable 3D RoPE")
    parser.add_argument("--no_sandwich_norm", action="store_true",
                       help="Disable sandwich normalization")
    
    # Training hyperparameters
    parser.add_argument("--learning_rate", type=float, default=5e-4,
                       help="Learning rate")
    parser.add_argument("--batch_size", type=int, default=8,
                       help="Batch size")
    parser.add_argument("--num_epochs", type=int, default=10,
                       help="Number of epochs")
    parser.add_argument("--warmup_steps", type=int, default=100,
                       help="Warmup steps")
    parser.add_argument("--weight_decay", type=float, default=0.01,
                       help="Weight decay")
    parser.add_argument("--max_grad_norm", type=float, default=1.0,
                       help="Max gradient norm")
    
    # Evaluation
    parser.add_argument("--eval_every_n_steps", type=int, default=100,
                       help="Evaluate every N steps")
    parser.add_argument("--eval_num_samples", type=int, default=500,
                       help="Number of samples for evaluation")
    
    # NEW: Data consistency parameters
    parser.add_argument("--eval_samples", type=int, default=100,
                       help="Number of training samples to use for evaluation")
    parser.add_argument("--validate_data_consistency", action="store_true", default=True,
                       help="Validate training/evaluation data consistency")
    parser.add_argument("--log_data_statistics", action="store_true", default=True,
                       help="Log detailed data statistics")
    parser.add_argument("--norm_tolerance", type=float, default=5.0,
                       help="Tolerance for norm differences between train/eval")
    parser.add_argument("--no_data_validation", action="store_true",
                       help="Disable data consistency validation")
    
    # Debugging and testing
    parser.add_argument("--overfit_test_size", type=int, default=None,
                       help="Size for overfitting test (None to disable)")
    parser.add_argument("--debug_mode", action="store_true",
                       help="Enable debug mode")
    parser.add_argument("--max_shards", type=int, default=1,
                       help="Maximum number of shards to use")
    
    # System
    parser.add_argument("--fp16", action="store_true", default=True,
                       help="Use mixed precision")
    parser.add_argument("--num_workers", type=int, default=0,
                       help="Number of dataloader workers")
    
    # WandB configuration
    parser.add_argument("--use_wandb", action="store_true", default=False,
                       help="Enable WandB logging")
    parser.add_argument("--no_wandb", action="store_true",
                       help="Disable WandB logging")
    parser.add_argument("--wandb_project", type=str, default="blip3o-clip-reproduction-fixed",
                       help="WandB project name")
    parser.add_argument("--wandb_run_name", type=str, default="noise_scaling",
                       help="WandB run name")
    parser.add_argument("--wandb_tags", type=str, nargs="*", default=None,
                       help="WandB tags for the run")
    
    return parser.parse_args()

def validate_embeddings_directory(embeddings_dir: Path, logger):
    """Validate and analyze embeddings directory"""
    logger.info(f"üîç Validating embeddings directory: {embeddings_dir}")
    
    if not embeddings_dir.exists():
        raise FileNotFoundError(f"Embeddings directory does not exist: {embeddings_dir}")
    
    # Find pickle files
    pkl_files = list(embeddings_dir.glob("*.pkl"))
    
    if not pkl_files:
        raise FileNotFoundError(f"No .pkl files found in {embeddings_dir}")
    
    logger.info(f"Found {len(pkl_files)} pickle files")
    
    # Analyze first file to understand data structure
    try:
        import pickle
        first_file = pkl_files[0]
        logger.info(f"Analyzing first file: {first_file.name}")
        
        with open(first_file, 'rb') as f:
            data = pickle.load(f)
        
        logger.info(f"Keys in first file: {list(data.keys())}")
        
        if 'clip_blip3o_embeddings' in data:
            clip_shape = data['clip_blip3o_embeddings'].shape
            logger.info(f"CLIP embeddings shape: {clip_shape}")
            
            # Compute statistics
            clip_data = data['clip_blip3o_embeddings']
            if hasattr(clip_data, 'numpy'):
                clip_data = clip_data.numpy()
            
            clip_norms = np.linalg.norm(clip_data, axis=-1).mean(axis=1)
            clip_norm_mean = np.mean(clip_norms)
            clip_norm_std = np.std(clip_norms)
            
            logger.info(f"üìä CLIP data analysis:")
            logger.info(f"   Norm mean: {clip_norm_mean:.2f}")
            logger.info(f"   Norm std: {clip_norm_std:.2f}")
            logger.info(f"   Norm range: [{np.min(clip_norms):.2f}, {np.max(clip_norms):.2f}]")
            logger.info(f"   Samples: {clip_shape[0]}")
            logger.info(f"   Tokens: {clip_shape[1]}")
            logger.info(f"   Dimensions: {clip_shape[2]}")
        
        if 'eva_blip3o_embeddings' in data:
            eva_shape = data['eva_blip3o_embeddings'].shape
            logger.info(f"EVA embeddings shape: {eva_shape}")
            
            # Compute statistics
            eva_data = data['eva_blip3o_embeddings']
            if hasattr(eva_data, 'numpy'):
                eva_data = eva_data.numpy()
            
            eva_norms = np.linalg.norm(eva_data, axis=-1).mean(axis=1)
            eva_norm_mean = np.mean(eva_norms)
            eva_norm_std = np.std(eva_norms)
            
            logger.info(f"üìä EVA data analysis:")
            logger.info(f"   Norm mean: {eva_norm_mean:.2f}")
            logger.info(f"   Norm std: {eva_norm_std:.2f}")
            logger.info(f"   Norm range: [{np.min(eva_norms):.2f}, {np.max(eva_norms):.2f}]")
            logger.info(f"   Samples: {eva_shape[0]}")
            logger.info(f"   Tokens: {eva_shape[1]}")
            logger.info(f"   Dimensions: {eva_shape[2]}")
        
        return {
            'num_files': len(pkl_files),
            'clip_shape': clip_shape if 'clip_blip3o_embeddings' in data else None,
            'eva_shape': eva_shape if 'eva_blip3o_embeddings' in data else None,
            'clip_norm_mean': clip_norm_mean if 'clip_blip3o_embeddings' in data else None,
            'eva_norm_mean': eva_norm_mean if 'eva_blip3o_embeddings' in data else None,
        }
        
    except Exception as e:
        logger.error(f"Failed to analyze embeddings: {e}")
        return {'num_files': len(pkl_files)}

def setup_device_and_model(args, logger):
    """Setup device and create model"""
    # Setup device
    if torch.cuda.is_available():
        device = torch.device("cuda")
        logger.info(f"Using GPU: {torch.cuda.get_device_name(0)}")
        logger.info(f"GPU Memory: {torch.cuda.get_device_properties(0).total_memory / 1e9:.1f} GB")
        torch.cuda.empty_cache()
    else:
        device = torch.device("cpu")
        logger.info("Using CPU")
    
    # Process architecture arguments
    use_3d_rope = args.use_3d_rope and not args.no_3d_rope
    use_sandwich_norm = args.use_sandwich_norm and not args.no_sandwich_norm
    
    logger.info("üèóÔ∏è BLIP3-o Architecture Configuration:")
    logger.info(f"  3D Rotary Position Embedding: {'‚úÖ Enabled' if use_3d_rope else '‚ùå Disabled'}")
    logger.info(f"  Sandwich Normalization: {'‚úÖ Enabled' if use_sandwich_norm else '‚ùå Disabled'}")
    
    # Import and create model using the FIXED files
    model = None
    try:
        # Try to import from the fixed files we just created
        sys.path.insert(0, str(Path(__file__).parent))
        
        # First try to import the model from the original files in current directory
        try:
            from blip3o_dit import create_clip_reproduction_model, BLIP3oCLIPDiTConfig
            logger.info("‚úÖ Imported model from blip3o_dit.py")
            model = create_clip_reproduction_model(
                model_size=args.model_size,
                training_mode=args.training_mode,
                use_3d_rope=use_3d_rope,
                use_sandwich_norm=use_sandwich_norm,
            )
        except ImportError:
            # Try from modules
            from src.modules.models.blip3o_dit import create_clip_reproduction_model, BLIP3oCLIPDiTConfig
            logger.info("‚úÖ Imported model from src.modules.models.blip3o_dit")
            model = create_clip_reproduction_model(
                model_size=args.model_size,
                training_mode=args.training_mode,
                use_3d_rope=use_3d_rope,
                use_sandwich_norm=use_sandwich_norm,
            )
        
    except ImportError as e:
        logger.error(f"‚ùå Could not import model: {e}")
        raise ImportError("Could not import model from any path")
    
    if model is None:
        raise RuntimeError("Failed to create model")
    
    logger.info(f"Creating {args.model_size} model for {args.training_mode} mode...")
    
    model = model.to(device)
    
    logger.info(f"Model created with {model.get_num_parameters():,} parameters")
    logger.info(f"Model moved to {device}")
    
    return device, model

def create_loss_function(args, logger):
    """Create loss function"""
    loss_fn = None
    try:
        # Try to import from current directory first
        try:
            from blip3o_fm_loss import create_clip_reproduction_loss
            logger.info("‚úÖ Imported loss from blip3o_fm_loss.py")
        except ImportError:
            from src.modules.losses.blip3o_fm_loss import create_clip_reproduction_loss
            logger.info("‚úÖ Imported loss from src.modules.losses.blip3o_fm_loss")
        
        loss_fn = create_clip_reproduction_loss(
            prediction_type="velocity",
            flow_type="rectified",
            loss_weight=1.0,
            use_adaptive_noise_scaling=True,  # Enable adaptive noise scaling
            debug_mode=args.debug_mode
        )
        
    except ImportError as e:
        logger.error(f"‚ùå Could not import loss function: {e}")
        raise ImportError("Could not import loss function from any path")
    
    if loss_fn is None:
        raise RuntimeError("Failed to create loss function")
    
    logger.info("Flow matching loss created with adaptive noise scaling")
    return loss_fn

def create_dataloaders(args, logger, data_analysis):
    """Create data loaders with consistent evaluation"""
    # Process data consistency arguments
    validate_consistency = args.validate_data_consistency and not args.no_data_validation
    
    logger.info("üìä Creating dataloaders with CONSISTENT evaluation:")
    logger.info(f"  Evaluation samples: {args.eval_samples} (from training data)")
    logger.info(f"  Data consistency validation: {validate_consistency}")
    logger.info(f"  Statistics logging: {args.log_data_statistics}")
    logger.info(f"  Norm tolerance: {args.norm_tolerance}")
    
    # Determine expected norm ranges based on data analysis
    expected_clip_range = (20.0, 50.0)  # Default range
    expected_eva_range = (20.0, 60.0)   # Default range
    
    if data_analysis.get('clip_norm_mean'):
        clip_mean = data_analysis['clip_norm_mean']
        expected_clip_range = (clip_mean - 10, clip_mean + 10)
        logger.info(f"üìä Expected CLIP norm range: {expected_clip_range} (based on data: {clip_mean:.2f})")
    
    if data_analysis.get('eva_norm_mean'):
        eva_mean = data_analysis['eva_norm_mean']
        expected_eva_range = (eva_mean - 15, eva_mean + 15)
        logger.info(f"üìä Expected EVA norm range: {expected_eva_range} (based on data: {eva_mean:.2f})")
    
    train_dataloader, eval_dataloader = None, None
    try:
        # Import the FIXED dataset
        try:
            # First check if we have the files in the artifacts we just created
            # For now, import from the existing files
            from blip3o_datasets import create_clip_reproduction_dataloaders
            logger.info("‚úÖ Imported FIXED dataset from blip3o_datasets.py")
        except ImportError:
            from src.modules.datasets.blip3o_dataset import create_clip_reproduction_dataloaders
            logger.info("‚úÖ Imported dataset from src.modules.datasets.blip3o_dataset")
        
        train_dataloader, eval_dataloader = create_clip_reproduction_dataloaders(
            chunked_embeddings_dir=args.chunked_embeddings_dir,
            batch_size=args.batch_size,
            training_mode=args.training_mode,
            max_shards=args.max_shards,
            normalize_embeddings=False,  # Keep disabled for consistency
            num_workers=args.num_workers,
            pin_memory=torch.cuda.is_available(),
            # NEW: Consistent evaluation parameters
            eval_samples=args.eval_samples,
            eval_from_training=True,  # Use training samples for evaluation
            collect_statistics=args.log_data_statistics,
            # Data validation parameters
            validate_shapes=True,
            skip_corrupted=True,
            expected_clip_norm_range=expected_clip_range,
            expected_eva_norm_range=expected_eva_range,
        )
        
    except ImportError as e:
        logger.error(f"‚ùå Could not import dataset: {e}")
        raise ImportError("Could not import dataset from any path")
    
    if train_dataloader is None:
        raise RuntimeError("Failed to create dataloaders")
    
    logger.info(f"‚úÖ FIXED dataloaders created")
    logger.info(f"  üéØ CRITICAL FIX: Evaluation uses subset of training data")
    logger.info(f"  üìä This ensures consistent norms between training and evaluation")
    logger.info(f"  üö´ Normalization disabled for consistency")
    
    return train_dataloader, eval_dataloader

def create_trainer(model, loss_fn, train_dataloader, eval_dataloader, args, device, logger):
    """Create trainer with data consistency validation"""
    # Process arguments
    use_wandb = args.use_wandb and not args.no_wandb
    validate_consistency = args.validate_data_consistency and not args.no_data_validation
    
    # Create run name if not provided
    wandb_run_name = args.wandb_run_name
    if wandb_run_name is None and use_wandb:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        arch_features = []
        if getattr(model.config, 'use_3d_rope', False):
            arch_features.append("3drope")
        if getattr(model.config, 'use_sandwich_norm', False):
            arch_features.append("sandwich")
        arch_str = "_".join(arch_features) if arch_features else "standard"
        wandb_run_name = f"blip3o_fixed_{args.model_size}_{args.training_mode}_{arch_str}_{timestamp}"
    
    # WandB configuration
    wandb_config = {
        "model_size": args.model_size,
        "training_mode": args.training_mode,
        "use_3d_rope": getattr(model.config, 'use_3d_rope', False),
        "use_sandwich_norm": getattr(model.config, 'use_sandwich_norm', False),
        "batch_size": args.batch_size,
        "max_shards": args.max_shards,
        "experiment_version": "v4_fixed_consistent_evaluation",
        # NEW: Data consistency config
        "eval_samples": args.eval_samples,
        "validate_data_consistency": validate_consistency,
        "log_data_statistics": args.log_data_statistics,
        "norm_tolerance": args.norm_tolerance,
        "consistent_evaluation": True,
        "evaluation_from_training": True,
        "fix_applied": "consistent_train_eval_data",
    }
    
    # Add tags
    wandb_tags = ["blip3o", "clip_reproduction", "eva_conditioning", "FIXED", "consistent_evaluation"]
    if getattr(model.config, 'use_3d_rope', False):
        wandb_tags.append("3d_rope")
    if getattr(model.config, 'use_sandwich_norm', False):
        wandb_tags.append("sandwich_norm")
    if args.overfit_test_size:
        wandb_tags.append("overfit_test")
    if args.wandb_tags:
        wandb_tags.extend(args.wandb_tags)
    
    trainer = None
    try:
        # Import the FIXED trainer
        try:
            from blip3o_trainer import create_clip_trainer
            logger.info("‚úÖ Imported FIXED trainer from blip3o_trainer.py")
        except ImportError:
            from src.modules.trainers.blip3o_trainer import create_clip_trainer
            logger.info("‚úÖ Imported trainer from src.modules.trainers.blip3o_trainer")
        
        trainer = create_clip_trainer(
            model=model,
            loss_fn=loss_fn,
            train_dataloader=train_dataloader,
            eval_dataloader=eval_dataloader,
            learning_rate=args.learning_rate,
            weight_decay=args.weight_decay,
            num_epochs=args.num_epochs,
            warmup_steps=args.warmup_steps,
            max_grad_norm=args.max_grad_norm,
            fp16=args.fp16,
            eval_every_n_steps=args.eval_every_n_steps,
            eval_num_samples=args.eval_num_samples,
            debug_mode=args.debug_mode,
            overfit_test_size=args.overfit_test_size,
            output_dir=args.output_dir,
            device=device,
            # NEW: Data consistency parameters
            validate_data_consistency=validate_consistency,
            log_data_statistics=args.log_data_statistics,
            norm_tolerance=args.norm_tolerance,
            # WandB parameters
            use_wandb=use_wandb,
            wandb_project=args.wandb_project,
            wandb_run_name=wandb_run_name,
            wandb_config=wandb_config,
        )
        
    except ImportError as e:
        logger.error(f"‚ùå Could not import trainer: {e}")
        raise ImportError("Could not import trainer from any path")
    
    if trainer is None:
        raise RuntimeError("Failed to create trainer")
    
    logger.info("‚úÖ FIXED trainer created with data consistency validation")
    logger.info(f"  üìä WandB enabled: {use_wandb}")
    logger.info(f"  üéØ Data consistency validation: {validate_consistency}")
    logger.info(f"  üìà Statistics logging: {args.log_data_statistics}")
    if use_wandb:
        logger.info(f"  üìä WandB project: {args.wandb_project}")
        logger.info(f"  üìä WandB run name: {wandb_run_name}")
        logger.info(f"  üìä WandB tags: {wandb_tags}")
    
    return trainer

def main():
    """Main training function with data consistency fixes"""
    args = parse_arguments()
    logger = setup_logging()
    
    logger.info("üöÄ FIXED: CLIP Reproduction with Consistent Evaluation")
    logger.info("=" * 80)
    logger.info("üîß CRITICAL FIXES APPLIED:")
    logger.info("  1. ‚úÖ Evaluation uses subset of training data")
    logger.info("  2. ‚úÖ Extensive data statistics logging")
    logger.info("  3. ‚úÖ Early detection of norm mismatches")
    logger.info("  4. ‚úÖ Validation of training/evaluation consistency")
    logger.info("  5. ‚úÖ No hidden normalization differences")
    logger.info("=" * 80)
    logger.info("üéØ PROBLEM ADDRESSED:")
    logger.info("  ‚Ä¢ Training data CLIP norm: ~40 (model learns this)")
    logger.info("  ‚Ä¢ Evaluation data CLIP norm: ~26 (different source!)")
    logger.info("  ‚Ä¢ Model predicts norm ~40 but evaluated on norm ~26")
    logger.info("  ‚Ä¢ Result: Low CLIP similarity due to norm mismatch")
    logger.info("=" * 80)
    logger.info("üîß SOLUTION:")
    logger.info("  ‚Ä¢ Use first 100 samples from training data for evaluation")
    logger.info("  ‚Ä¢ Validate that train/eval norms are consistent")
    logger.info("  ‚Ä¢ Log detailed statistics to catch any mismatches")
    logger.info("  ‚Ä¢ No separate evaluation dataset preprocessing")
    logger.info("=" * 80)
    logger.info("EXPERIMENT DETAILS:")
    logger.info("  üìã Task: Reproduce clean CLIP embeddings from EVA embeddings")
    logger.info("  üß† Model: BLIP3-o DiT with advanced architecture features")
    logger.info("  üéØ Target: CLIP embeddings [B, N, 1024]")
    logger.info("  üéÆ Conditioning: EVA embeddings [B, N, 4096]")
    logger.info("  üåä Method: Rectified Flow Matching")
    logger.info("  üö´ Normalization: MINIMAL (only for evaluation similarity)")
    logger.info("=" * 80)
    
    # Process architecture arguments
    use_3d_rope = args.use_3d_rope and not args.no_3d_rope
    use_sandwich_norm = args.use_sandwich_norm and not args.no_sandwich_norm
    validate_consistency = args.validate_data_consistency and not args.no_data_validation
    
    logger.info("üèóÔ∏è BLIP3-o ARCHITECTURE FEATURES:")
    logger.info(f"  üåê 3D Rotary Position Embedding: {'‚úÖ ENABLED' if use_3d_rope else '‚ùå DISABLED'}")
    logger.info(f"  ü•™ Sandwich Normalization: {'‚úÖ ENABLED' if use_sandwich_norm else '‚ùå DISABLED'}")
    logger.info(f"  üîç Grouped-Query Attention: ‚úÖ ENABLED")
    logger.info(f"  üìä WandB Logging: {'‚úÖ ENABLED' if args.use_wandb and not args.no_wandb else '‚ùå DISABLED'}")
    logger.info("=" * 80)
    logger.info("üéØ DATA CONSISTENCY FEATURES:")
    logger.info(f"  üìä Consistent Evaluation: ‚úÖ ENABLED (uses training samples)")
    logger.info(f"  üîç Data Validation: {'‚úÖ ENABLED' if validate_consistency else '‚ùå DISABLED'}")
    logger.info(f"  üìà Statistics Logging: {'‚úÖ ENABLED' if args.log_data_statistics else '‚ùå DISABLED'}")
    logger.info(f"  ‚öñÔ∏è Norm Tolerance: {args.norm_tolerance}")
    logger.info(f"  üìä Evaluation Samples: {args.eval_samples} (from training)")
    logger.info("=" * 80)
    logger.info(f"Configuration:")
    logger.info(f"  Model size: {args.model_size}")
    logger.info(f"  Training mode: {args.training_mode}")
    logger.info(f"  Embeddings dir: {args.chunked_embeddings_dir}")
    logger.info(f"  Output dir: {args.output_dir}")
    logger.info(f"  Learning rate: {args.learning_rate}")
    logger.info(f"  Batch size: {args.batch_size}")
    logger.info(f"  Epochs: {args.num_epochs}")
    logger.info(f"  Max shards: {args.max_shards}")
    if args.overfit_test_size:
        logger.info(f"  üß™ OVERFITTING TEST: {args.overfit_test_size} samples")
    logger.info(f"  Debug mode: {args.debug_mode}")
    if args.use_wandb and not args.no_wandb:
        logger.info(f"  üìä WandB project: {args.wandb_project}")
        if args.wandb_run_name:
            logger.info(f"  üìä WandB run: {args.wandb_run_name}")
    logger.info("=" * 80)
    
    try:
        # Create output directory
        output_dir = Path(args.output_dir)
        output_dir.mkdir(parents=True, exist_ok=True)
        
        # Validate embeddings directory and analyze data
        embeddings_dir = Path(args.chunked_embeddings_dir)
        data_analysis = validate_embeddings_directory(embeddings_dir, logger)
        
        # Setup device and model
        device, model = setup_device_and_model(args, logger)
        
        # Create loss function
        loss_fn = create_loss_function(args, logger)
        
        # Create dataloaders with FIXED consistent evaluation
        train_dataloader, eval_dataloader = create_dataloaders(args, logger, data_analysis)
        
        # Validate that we have evaluation dataloader
        if eval_dataloader is None:
            logger.error("‚ùå CRITICAL: No evaluation dataloader created!")
            logger.error("   This means we cannot validate training/evaluation consistency!")
            raise RuntimeError("Failed to create evaluation dataloader")
        
        logger.info("‚úÖ CONSISTENCY CHECK: Both training and evaluation dataloaders created")
        
        # Create trainer with FIXED data consistency validation
        trainer = create_trainer(model, loss_fn, train_dataloader, eval_dataloader, args, device, logger)
        
        # Save configuration (convert numpy types to Python types for JSON)
        def convert_numpy_types(obj):
            """Convert numpy types to Python types for JSON serialization"""
            if hasattr(obj, 'item'):  # numpy scalars
                return obj.item()
            elif isinstance(obj, np.ndarray):
                return obj.tolist()
            elif isinstance(obj, dict):
                return {k: convert_numpy_types(v) for k, v in obj.items()}
            elif isinstance(obj, list):
                return [convert_numpy_types(v) for v in obj]
            else:
                return obj
        
        config = {
            'args': vars(args),
            'model_params': model.get_num_parameters() if hasattr(model, 'get_num_parameters') else 'unknown',
            'timestamp': datetime.now().isoformat(),
            'experiment_type': 'clip_reproduction_blip3o_FIXED',
            'normalization_approach': 'minimal_with_consistent_evaluation',
            'data_analysis': convert_numpy_types(data_analysis),
            'fixes_applied': [
                'consistent_train_eval_data',
                'evaluation_from_training_samples',
                'data_statistics_logging',
                'norm_mismatch_detection',
                'early_consistency_validation',
                'extensive_debugging',
                'no_hidden_normalization_differences',
            ],
            'architecture_features': {
                '3d_rope': use_3d_rope,
                'sandwich_normalization': use_sandwich_norm,
                'grouped_query_attention': True,
                'minimal_normalization': True,
                'consistent_evaluation': True,
                'data_validation': validate_consistency,
            },
            'consistency_features': {
                'eval_from_training': True,
                'eval_samples': args.eval_samples,
                'validate_consistency': validate_consistency,
                'log_statistics': args.log_data_statistics,
                'norm_tolerance': args.norm_tolerance,
                'expected_clip_norm_range': data_analysis.get('clip_norm_mean', 'unknown'),
                'expected_eva_norm_range': data_analysis.get('eva_norm_mean', 'unknown'),
            },
            'wandb_config': {
                'enabled': args.use_wandb and not args.no_wandb,
                'project': args.wandb_project,
                'run_name': args.wandb_run_name,
            },
        }
        
        # config_path = output_dir / 'experiment_config_FIXED.json'
        # with open(config_path, 'w') as f:
        #     json.dump(config, f, indent=2)
        
        # logger.info(f"FIXED configuration saved to {config_path}")
        
        # Start training
        logger.info("\nüöÄ Starting BLIP3-o training with CONSISTENT evaluation...")
        logger.info("Expected behavior with FIXES:")
        logger.info("  ‚úÖ Training and evaluation should have similar CLIP norms")
        logger.info("  ‚úÖ Model predictions should match evaluation target norms")
        logger.info("  ‚úÖ CLIP similarity should improve significantly")
        logger.info("  ‚úÖ No norm mismatch warnings")
        logger.info("  ‚úÖ Consistent performance across training and evaluation")
        logger.info("  ‚úÖ Detailed statistics logging for debugging")
        
        if args.overfit_test_size:
            logger.info(f"  üß™ OVERFITTING TEST: Should achieve >0.8 similarity on {args.overfit_test_size} samples")
        
        logger.info("")
        
        start_time = datetime.now()
        
        # Run training with FIXED data consistency
        summary = trainer.train()
        
        end_time = datetime.now()
        duration = (end_time - start_time).total_seconds()
        
        # Final summary
        logger.info("\n" + "=" * 80)
        logger.info("üéâ FIXED BLIP3-o TRAINING COMPLETED!")
        logger.info("=" * 80)
        logger.info(f"üìä RESULTS SUMMARY:")
        logger.info(f"  Duration: {duration:.1f} seconds ({duration/60:.1f} minutes)")
        logger.info(f"  Total steps: {summary.get('total_steps', 0)}")
        logger.info(f"  Best loss: {summary.get('best_loss', float('inf')):.6f}")
        logger.info(f"  Best CLIP similarity: {summary.get('best_eval_similarity', 0):.4f}")
        
        # NEW: Data consistency results
        consistency_warnings = summary.get('norm_consistency_warnings', 0)
        data_consistency_good = summary.get('data_consistency_good', False)
        
        logger.info(f"üéØ DATA CONSISTENCY RESULTS:")
        logger.info(f"  Consistency warnings: {consistency_warnings}")
        logger.info(f"  Data consistency: {'‚úÖ GOOD' if data_consistency_good else '‚ö†Ô∏è POOR'}")
        
        if data_consistency_good:
            logger.info(f"  ‚úÖ SUCCESS: No norm mismatches detected!")
            logger.info(f"  ‚úÖ Training and evaluation data are consistent!")
        else:
            logger.warning(f"  ‚ö†Ô∏è ATTENTION: {consistency_warnings} consistency warnings detected")
            logger.warning(f"  ‚ö†Ô∏è There may still be norm mismatches in the data")
        
        # Architecture results
        logger.info(f"üèóÔ∏è ARCHITECTURE RESULTS:")
        logger.info(f"  üåê 3D RoPE: {'‚úÖ' if use_3d_rope else '‚ùå'}")
        logger.info(f"  ü•™ Sandwich Norm: {'‚úÖ' if use_sandwich_norm else '‚ùå'}")
        logger.info(f"  üìä WandB: {'‚úÖ' if summary.get('wandb_enabled', False) else '‚ùå'}")
        
        # Evaluation results
        final_eval = summary.get('final_eval', {})
        if final_eval:
            logger.info(f"üìä FINAL EVALUATION:")
            logger.info(f"  CLIP similarity: {final_eval.get('eval_clip_similarity', 0):.4f}")
            logger.info(f"  High quality (>0.7): {final_eval.get('eval_high_quality', 0)*100:.1f}%")
            logger.info(f"  Very high quality (>0.8): {final_eval.get('eval_very_high_quality', 0)*100:.1f}%")
            logger.info(f"  Excellent quality (>0.9): {final_eval.get('eval_excellent_quality', 0)*100:.1f}%")
            logger.info(f"  Generated norm: {final_eval.get('eval_generated_norm_mean', 0):.3f}")
            logger.info(f"  Target norm: {final_eval.get('eval_target_norm_mean', 0):.3f}")
            logger.info(f"  Norm ratio: {final_eval.get('eval_norm_ratio', 0):.3f}")
            logger.info(f"  Samples evaluated: {final_eval.get('eval_samples', 0)}")
            
            # Consistency check in final evaluation
            if 'train_eval_clip_diff' in final_eval:
                diff = final_eval['train_eval_clip_diff']
                consistency = final_eval.get('data_consistency_good', False)
                logger.info(f"  üéØ Final consistency: {'‚úÖ Good' if consistency else '‚ö†Ô∏è Poor'} (diff: {diff:.2f})")
        
        # Overfitting test results
        if args.overfit_test_size:
            overfit_success = summary.get('overfit_success', False)
            logger.info(f"üß™ OVERFITTING TEST: {'‚úÖ PASSED' if overfit_success else '‚ùå FAILED'}")
            if overfit_success:
                logger.info("   ‚úÖ Model can learn and memorize - architecture is working!")
            else:
                logger.info("   ‚ö†Ô∏è Model struggles to overfit - check architecture/loss")
        
        # Success assessment
        best_sim = summary.get('best_eval_similarity', 0)
        logger.info(f"üèóÔ∏è OVERALL ASSESSMENT:")
        if data_consistency_good:
            if best_sim > 0.7:
                logger.info("   üéâ EXCELLENT: FIXED approach works perfectly!")
                logger.info("   üéâ Data consistency maintained, high CLIP similarity achieved!")
            elif best_sim > 0.4:
                logger.info("   ‚úÖ GOOD: FIXED approach shows significant improvement!")
                logger.info("   ‚úÖ Data consistency maintained, good CLIP similarity!")
            elif best_sim > 0.2:
                logger.info("   üìà IMPROVED: FIXED approach shows clear progress!")
                logger.info("   üìà Data consistency maintained, some improvement in similarity!")
            else:
                logger.info("   ‚ö†Ô∏è NEEDS WORK: Data consistency good but similarity still low")
        else:
            logger.warning("   ‚ö†Ô∏è DATA CONSISTENCY ISSUES REMAIN: Further investigation needed")
        
        # WandB information
        if summary.get('wandb_enabled', True):
            logger.info(f"üìä WandB Dashboard: Check your {args.wandb_project} project for detailed metrics")
        
        # Save final summary (with numpy type conversion)
        summary['duration_seconds'] = duration
        summary['end_time'] = end_time.isoformat()
        summary['experiment_config'] = config
        summary['data_analysis'] = convert_numpy_types(data_analysis)
        summary['fixes_applied'] = config['fixes_applied']
        summary['consistency_features'] = config['consistency_features']
        
        # Convert any remaining numpy types in summary
        summary = convert_numpy_types(summary)
        
        summary_path = output_dir / 'final_summary_FIXED.json'
        with open(summary_path, 'w') as f:
            json.dump(summary, f, indent=2)
        
        logger.info(f"üìÅ FIXED final summary saved to {summary_path}")
        logger.info(f"üìÅ Model checkpoints saved to {output_dir}")
        
        logger.info("=" * 80)
        
        # Return success code based on data consistency
        if data_consistency_good:
            logger.info("üéâ SUCCESS: Data consistency maintained!")
            return 0
        else:
            logger.warning("‚ö†Ô∏è PARTIAL SUCCESS: Training completed but consistency issues remain")
            return 1
        
    except Exception as e:
        logger.error(f"‚ùå Training failed with error: {e}")
        traceback.print_exc()
        return 1
    
    except KeyboardInterrupt:
        logger.info("Training interrupted by user")
        return 1

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)