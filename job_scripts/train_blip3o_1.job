#!/bin/bash
#SBATCH --job-name=blip3o_no_norm
#SBATCH --partition=gpu_h100
#SBATCH --nodes=1
#SBATCH --gpus=1
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=8
#SBATCH --time=12:00:00
#SBATCH --mem=64G
#SBATCH --output=./slurm_out/blip3o_no_norm_%j.out
#SBATCH --error=./slurm_out/blip3o_no_norm_%j.err

# =============================================================================
# BLIP3-o CLIP Reproduction Training WITHOUT Normalization
# Task: Reproduce CLIP embeddings [B, N, 1024] from EVA embeddings [B, N, 4096]
# Method: Rectified Flow Matching with BLIP3-o DiT (NO NORMALIZATION)
# =============================================================================

echo "🚀 BLIP3-o CLIP Reproduction Training (NO NORMALIZATION)"
echo "=========================================="
echo "Job ID: ${SLURM_JOB_ID}"
echo "Node: $(hostname)"
echo "Time: $(date)"
echo "GPUs: $(nvidia-smi --query-gpu=name --format=csv,noheader,nounits | tr '\n' ', ')"
echo "=========================================="

cd $SLURM_SUBMIT_DIR

# Setup environment
module purge
module load 2024
module load Miniconda3/24.7.1-0
module load CUDA/12.6.0
source activate eva_clip_env

# ✅ Set WandB API key
export WANDB_API_KEY="0d9895af249ee18e4fa141e8a2350e0f4adb920f"
export WANDB_MODE="online"
export WANDB_CACHE_DIR="${TMPDIR}/wandb_cache"
mkdir -p "${WANDB_CACHE_DIR}"

# Verify WandB login
echo "🔐 Verifying WandB authentication..."
python -c "import wandb; wandb.login(key='$WANDB_API_KEY'); print('✅ WandB login successful')"

# Configuration
EMBEDDINGS_DIR="/scratch-shared/azadaianchuk1/blip3o_workspace/embeddings/patch_only_256_tokens"
OUTPUT_DIR="./checkpoints/blip3o_no_norm_$(date +%Y%m%d_%H%M%S)"
TRAINING_MODE="patch_only"
MODEL_SIZE="base"

# Training hyperparameters
NUM_EPOCHS=15
BATCH_SIZE=128
LEARNING_RATE=1e-5
WEIGHT_DECAY=0.01
WARMUP_STEPS=100
MAX_GRAD_NORM=1.0

# Loss weights (same as before)
VELOCITY_WEIGHT=1.0
SEMANTIC_WEIGHT=0.5
COSINE_WEIGHT=0.2
CONSISTENCY_WEIGHT=0.3

# Simple scaling factor (data-independent)
SIMPLE_SCALE_FACTOR=1.0  # Can be adjusted if needed

# Evaluation parameters
EVAL_EVERY_N_STEPS=50
EVAL_NUM_SAMPLES=100
EVAL_INFERENCE_STEPS=50

# Data configuration
MAX_SHARDS=3

# Create output directory
mkdir -p "${OUTPUT_DIR}"
mkdir -p ./slurm_out

echo ""
echo "⚙️ BLIP3-o Configuration (NO NORMALIZATION):"
echo "============================="
echo "Task: Reproduce CLIP embeddings from EVA embeddings"
echo "Method: BLIP3-o DiT WITHOUT CLIP normalization"
echo "Target: CLIP embeddings [B, N, 1024] (RAW)"
echo "Conditioning: EVA embeddings [B, N, 4096]"
echo ""
echo "Embeddings: $EMBEDDINGS_DIR"
echo "Output: $OUTPUT_DIR"
echo "Training mode: $TRAINING_MODE"
echo "Model size: $MODEL_SIZE"
echo "Max shards: $MAX_SHARDS"
echo "Simple scale factor: $SIMPLE_SCALE_FACTOR"
echo ""
echo "📊 Training Hyperparameters:"
echo "  Epochs: $NUM_EPOCHS"
echo "  Batch size: $BATCH_SIZE"
echo "  Learning rate: $LEARNING_RATE"
echo "  Weight decay: $WEIGHT_DECAY"
echo "  Warmup steps: $WARMUP_STEPS"
echo "  Max grad norm: $MAX_GRAD_NORM"
echo ""
echo "🎯 Loss Weights:"
echo "  Velocity: $VELOCITY_WEIGHT"
echo "  Semantic: $SEMANTIC_WEIGHT"
echo "  Cosine: $COSINE_WEIGHT"
echo "  Consistency: $CONSISTENCY_WEIGHT"
echo ""
echo "🔍 Evaluation Configuration:"
echo "  Eval every: $EVAL_EVERY_N_STEPS steps"
echo "  Eval samples: $EVAL_NUM_SAMPLES"
echo "  Inference steps: $EVAL_INFERENCE_STEPS"
echo ""
echo "🏗️ Architecture Features:"
echo "  • 3D Rotary Position Embedding"
echo "  • Sandwich Normalization (RMSNorm)"
echo "  • Grouped-Query Attention"
echo "  • Rectified Flow Matching"
echo "  • Simple Linear Timestep Schedule"
echo "  • Heun's Integration Method"
echo "  • EVA-CLIP Adapter Layers"
echo ""
echo "🔑 KEY CHANGE: NO CLIP NORMALIZATION"
echo "  • Works directly with raw CLIP embeddings"
echo "  • No dependency on training data statistics"
echo "  • Simplified training and evaluation pipeline"
echo "  • Optional simple data-independent scaling"
echo ""

# Verify embeddings exist
if [ ! -d "$EMBEDDINGS_DIR" ]; then
    echo "❌ Embeddings directory not found: $EMBEDDINGS_DIR"
    echo "Available embeddings:"
    ls -la "/scratch-shared/azadaianchuk1/blip3o_workspace/embeddings/" 2>/dev/null || echo "No embeddings found"
    exit 1
fi

echo "✅ Embeddings verified: $EMBEDDINGS_DIR"

# Check available shards
SHARD_COUNT=$(find "$EMBEDDINGS_DIR" -name "*.pkl" | wc -l)
echo "✅ Found $SHARD_COUNT embedding shards"

if [ $SHARD_COUNT -eq 0 ]; then
    echo "❌ No embedding shards found!"
    exit 1
fi

if [ $SHARD_COUNT -lt $MAX_SHARDS ]; then
    echo "⚠️ Only $SHARD_COUNT shards available (requested $MAX_SHARDS)"
    MAX_SHARDS=$SHARD_COUNT
    echo "   Adjusted to use $MAX_SHARDS shards"
fi

echo "✅ Training script ready"

echo ""
echo "🚀 Starting BLIP3-o Training (NO NORMALIZATION)..."
echo "===================================="
echo "🎯 Expected Behavior:"
echo "  ✅ No normalization-related crashes"
echo "  ✅ Direct work with raw CLIP embeddings"
echo "  ✅ Simplified training pipeline"
echo "  ✅ Non-zero gradients from first step"
echo "  ✅ Decreasing loss within first few epochs"
echo "  ✅ CLIP similarity during evaluation"
echo "  ✅ No dependency on training data statistics"
echo ""
echo "🏗️ Architecture:"
echo "  • BLIP3-o DiT with 3D RoPE and Sandwich Normalization"
echo "  • Rectified Flow Matching"
echo "  • Simple Linear Timestep Schedule"
echo "  • Heun's Integration Method"
echo "  • EVA [4096] → CLIP [1024] mapping (NO NORMALIZATION)"
echo ""

# Launch BLIP3-o training WITHOUT normalization
python train_dit.py \
    --chunked_embeddings_dir "$EMBEDDINGS_DIR" \
    --output_dir "$OUTPUT_DIR" \
    --model_size "$MODEL_SIZE" \
    --training_mode "$TRAINING_MODE" \
    --learning_rate $LEARNING_RATE \
    --batch_size $BATCH_SIZE \
    --num_epochs $NUM_EPOCHS \
    --warmup_steps $WARMUP_STEPS \
    --weight_decay $WEIGHT_DECAY \
    --max_grad_norm $MAX_GRAD_NORM \
    --velocity_weight $VELOCITY_WEIGHT \
    --semantic_weight $SEMANTIC_WEIGHT \
    --cosine_weight $COSINE_WEIGHT \
    --consistency_weight $CONSISTENCY_WEIGHT \
    --simple_scale_factor $SIMPLE_SCALE_FACTOR \
    --eval_every_n_steps $EVAL_EVERY_N_STEPS \
    --eval_num_samples $EVAL_NUM_SAMPLES \
    --eval_inference_steps $EVAL_INFERENCE_STEPS \
    --max_shards $MAX_SHARDS \
    --use_eva_adapter \
    --use_heun_inference \
    --use_timestep_weighting \
    --fp16 \
    --use_wandb \
    --wandb_project "blip3o-clip-no-norm"

TRAINING_EXIT_CODE=$?

echo ""
echo "======================================"
echo "📊 BLIP3-o Training Results (NO NORMALIZATION)"
echo "======================================"

if [ $TRAINING_EXIT_CODE -eq 0 ]; then
    echo "✅ BLIP3-o training completed successfully (NO NORMALIZATION)!"
    
    echo ""
    echo "📋 Training Summary:"
    echo "=================="
    
    # Check for training results
    SUMMARY_FILE="$OUTPUT_DIR/training_summary.json"
    CONFIG_FILE="$OUTPUT_DIR/experiment_config.json"
    
    if [ -f "$SUMMARY_FILE" ]; then
        echo ""
        echo "📊 Training Results:"
        echo "=================="
        
        # Extract key metrics using Python
        python -c "
import json
import sys
try:
    with open('$SUMMARY_FILE', 'r') as f:
        data = json.load(f)
    
    print(f'🎯 Best Loss: {data.get(\"best_loss\", float(\"inf\")):.6f}')
    print(f'🎯 Best CLIP Similarity: {data.get(\"best_eval_similarity\", 0):.4f}')
    print(f'📊 Total Steps: {data.get(\"total_steps\", 0):,}')
    print(f'⏱️ Training Time: {data.get(\"total_time_seconds\", 0):.1f} seconds')
    
    # Final evaluation
    final_eval = data.get('final_eval', {})
    if final_eval:
        print(f'')
        print(f'🔍 Final Evaluation (RAW CLIP space):')
        clip_sim = final_eval.get('eval_clip_similarity', 0)
        high_qual = final_eval.get('eval_high_quality', 0) * 100
        very_high_qual = final_eval.get('eval_very_high_quality', 0) * 100
        
        print(f'   Overall CLIP Similarity: {clip_sim:.4f}')
        print(f'   High Quality (>0.7): {high_qual:.1f}%')
        print(f'   Very High Quality (>0.8): {very_high_qual:.1f}%')
        print(f'   Samples Evaluated: {final_eval.get(\"eval_samples\", 0):,}')
        
        # Assessment
        if clip_sim > 0.8:
            print(f'   🎉 EXCELLENT: Outstanding CLIP reproduction without normalization!')
        elif clip_sim > 0.6:
            print(f'   ✅ VERY GOOD: Strong CLIP reproduction with simplified approach!')
        elif clip_sim > 0.4:
            print(f'   ✅ GOOD: Solid CLIP reproduction without data-dependent stats!')
        elif clip_sim > 0.2:
            print(f'   📈 FAIR: Decent reproduction, shows learning works!')
        else:
            print(f'   ⚠️ NEEDS WORK: Try adjusting simple_scale_factor or loss weights')
    
except Exception as e:
    print(f'Could not parse training summary: {e}')
    # Try to show any available checkpoints
    import os
    checkpoints = [f for f in os.listdir('$OUTPUT_DIR') if f.endswith('.pt')]
    if checkpoints:
        print(f'Found {len(checkpoints)} checkpoint files')
        print(f'Latest: {max(checkpoints)}')
    sys.exit(1)
"
        
        echo ""
        echo "📁 Training artifacts saved to: $OUTPUT_DIR"
    else
        echo "⚠️ No training summary found, checking for any outputs..."
        echo "Directory contents:"
        ls -la "$OUTPUT_DIR" 2>/dev/null || echo "Output directory not found"
    fi
    
    echo ""
    echo "🎯 Next Steps:"
    echo "============"
    echo "1. Review training logs above for success indicators"
    echo "2. If results are good, run with more data:"
    echo "   • Increase MAX_SHARDS to use more training data" 
    echo "   • Increase NUM_EPOCHS for longer training"
    echo "   • Adjust BATCH_SIZE based on memory usage"
    echo "3. Run comprehensive evaluation on test set"
    echo "4. Try different simple_scale_factor values if needed"
    echo ""
    echo "🔍 SUCCESS INDICATORS:"
    echo "  ✅ Non-zero gradients throughout training"
    echo "  ✅ Decreasing loss trend"
    echo "  ✅ Increasing similarity metrics"
    echo "  ✅ Final CLIP similarity >0.2 (fair), >0.4 (good), >0.6 (excellent)"
    echo "  ✅ No normalization-related crashes"
    
    echo ""
    echo "✅ SUCCESS: BLIP3-o training completed (NO NORMALIZATION)!"
    
else
    echo "❌ FAILED: Training exit code $TRAINING_EXIT_CODE"
    echo ""
    echo "💡 Troubleshooting:"
    echo "  • Check log files in ./slurm_out/ for detailed error messages"
    echo "  • Verify all required Python files are present"
    echo "  • Check embeddings directory structure and file formats"
    echo "  • Monitor GPU memory usage with nvidia-smi"
    echo "  • Try reducing batch_size if out-of-memory errors"
    echo "  • Try different simple_scale_factor values"
    echo ""
    echo "🔧 Quick Recovery Options:"
    echo "  • Use smaller model: --model_size small or tiny"
    echo "  • Reduce batch size: --batch_size 4"
    echo "  • Use fewer shards: MAX_SHARDS=2"
    echo "  • Try scaling factor: --simple_scale_factor 0.1"
fi

echo ""
echo "📊 GPU Resource Usage Summary:"
nvidia-smi --query-gpu=name,memory.total,memory.used,utilization.gpu --format=csv,noheader,nounits | \
    awk 'BEGIN{print "GPU | Total Memory | Used Memory | Utilization"} {printf "%s | %s MB | %s MB | %s%%\n", $1, $2, $3, $4}'

echo ""
echo "🏁 Job completed at $(date)"
echo "Total job time: $(echo "scale=2; ($(date +%s) - $SECONDS) / 3600" | bc -l) hours"
echo ""
echo "📚 BLIP3-o SUMMARY (NO NORMALIZATION):"
echo "This job trains BLIP3-o DiT to reproduce CLIP embeddings from EVA embeddings"
echo "WITHOUT using data-dependent CLIP normalization. This approach:"
echo "• Works directly with raw CLIP embeddings"
echo "• Has no dependency on training data statistics"
echo "• Simplifies training and evaluation pipelines"
echo "• Eliminates normalization-related crashes"
echo "• Makes the model easier to deploy and understand"
echo "Success indicates the architecture works well without complex normalization."
echo "=========================================="

exit $TRAINING_EXIT_CODE

# =============================================================================
# EVALUATION JOB SCRIPT (NO NORMALIZATION)
# =============================================================================

# Separate evaluation job script
cat > evaluate_blip3o_no_norm.job << 'EOF'
#!/bin/bash
#SBATCH --job-name=blip3o_eval_no_norm
#SBATCH --partition=gpu_h100
#SBATCH --nodes=1
#SBATCH --gpus=1
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=8
#SBATCH --time=2:00:00
#SBATCH --mem=32G
#SBATCH --output=./slurm_out/blip3o_eval_no_norm_%j.out
#SBATCH --error=./slurm_out/blip3o_eval_no_norm_%j.err

echo "🔬 BLIP3-o MS-COCO Evaluation (NO NORMALIZATION)"
echo "Job ID: ${SLURM_JOB_ID} | Node: $(hostname) | Time: $(date)"

cd $SLURM_SUBMIT_DIR

# Setup environment
module purge
module load 2024
module load Miniconda3/24.7.1-0
module load CUDA/12.6.0
source activate eva_clip_env

# Configuration
STANDARD_EMBEDDINGS_BASE="/scratch-shared/azadaianchuk1/blip3o_workspace/embeddings"
COCO_EMBEDDINGS_FILE="${STANDARD_EMBEDDINGS_BASE}/coco_embeddings/coco_embeddings_consolidated.pkl"
MODEL_PATH="/home/azadaianchuk1/eva-clip-v6_2/checkpoints/blip3o_no_norm_latest"
OUTPUT_DIR="./coco_eval_no_norm_$(date +%Y%m%d_%H%M%S)"

# Parameters
MAX_SAMPLES=1000
BATCH_SIZE=8
NUM_INFERENCE_STEPS=50

# Parse arguments
[ -n "$1" ] && MODEL_PATH="$1"
[ -n "$2" ] && MAX_SAMPLES="$2"
[ -n "$3" ] && BATCH_SIZE="$3"

echo "Model: $MODEL_PATH"
echo "COCO Embeddings: $COCO_EMBEDDINGS_FILE"
echo "Max Samples: $MAX_SAMPLES | Batch Size: $BATCH_SIZE"
echo "🔑 Evaluation WITHOUT normalization"

# Verify files exist
if [ ! -d "$MODEL_PATH" ]; then
    echo "❌ Model not found: $MODEL_PATH"
    exit 1
fi

if [ ! -f "$COCO_EMBEDDINGS_FILE" ]; then
    echo "❌ COCO embeddings not found: $COCO_EMBEDDINGS_FILE"
    exit 1
fi

# Check evaluation script
EVAL_SCRIPT="eval_blip3o_coco.py"
if [ ! -f "$EVAL_SCRIPT" ]; then
    echo "❌ Evaluation script not found: $EVAL_SCRIPT"
    echo "Please ensure the modified evaluation script is available"
    exit 1
fi

mkdir -p "${OUTPUT_DIR}" ./slurm_out

echo "🚀 Starting evaluation (NO NORMALIZATION)..."

# Run evaluation using the modified script (NO NORMALIZATION)
python $EVAL_SCRIPT \
    --model_path "$MODEL_PATH" \
    --coco_embeddings_file "$COCO_EMBEDDINGS_FILE" \
    --batch_size $BATCH_SIZE \
    --num_inference_steps $NUM_INFERENCE_STEPS \
    --max_samples $MAX_SAMPLES \
    --use_heun \
    --training_mode patch_only

EVAL_EXIT_CODE=$?

echo ""
echo "📊 Evaluation Results (NO NORMALIZATION)"
echo "===================="

if [ $EVAL_EXIT_CODE -eq 0 ]; then
    echo "✅ Evaluation completed successfully!"
    echo "🔑 Evaluated in raw CLIP embedding space"
    echo "📊 No normalization/denormalization applied"
    
else
    echo "❌ Evaluation failed (exit code: $EVAL_EXIT_CODE)"
    echo "Check logs in ./slurm_out/ for details"
fi

echo "🏁 Job completed at $(date)"
exit $EVAL_EXIT_CODE
EOF

echo "📝 Created evaluation job script: evaluate_blip3o_no_norm.job"